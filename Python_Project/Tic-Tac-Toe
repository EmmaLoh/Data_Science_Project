
#  A simple Tic-Tac-Toe game
# Players 'X' and 'O' take turn inputing their position on the command line using numbers 1-9
# 1 | 2 | 3
# ---------
# 4 | 5 | 6
# ---------
# 7 | 8 | 9
#



# The Game Board 
from tkinter import N
def main():

 board = {
    1: ' ', 2: ' ', 3: ' ',
    4: ' ', 5: ' ', 6: ' ',
    7: ' ', 8: ' ', 9: ' '
}

# TODO: update the gameboard with the user input
 def markBoard(position, mark):
  if board[position]== ' ':
   board[position] = mark
  

# TODO: print the game board as described at the top of this code skeleton
# Will not be tested in Part 1
 def printBoard():
    gameboard={
        1:' ',2:' ',3:' ',
        4:' ',5:' ',6:' ',
        7:' ',8:' ',9:' '
    }
    for i in gameboard.keys():
        if board[i]==' ':
            gameboard[i]=i
        else:
            gameboard[i]=board[i]

    print(
        str(gameboard[1])+' | '+str(gameboard[2])+' | '+str(gameboard[3])+'\n'+'-------- \n'+
        str(gameboard[4])+' | '+str(gameboard[5])+' | '+str(gameboard[6])+'\n'+'-------- \n'+
        str(gameboard[7])+' | '+str(gameboard[8])+' | '+str(gameboard[9])+'\n'
    )

# TODO: check for wrong input, this function should return True or False.
# True Cthat the user input is correct
# you will need to check for wrong input (user is entering invalid position) or position is out of bound
# another case is that the position is already occupied
 def validateMove(position):
   pos=int(position)
   if  1<= pos<=9:
       if board[pos]==' ':
        return True
    
   return False
   
# TODO: list out all the combinations of winning, you will neeed this
# one of the winning combinations is already done for you
 winCombinations = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
    [1, 4, 7],
    [2, 5, 8],
    [3, 6, 9],
    [1, 5, 9],
    [3, 5, 7]

]

# TODO: implement a logic to check if the previous winner just win
# This method should return with True or False

 def checkWin(player):
    #print(player)
    for com in winCombinations:
        #print(board[com[0]])
        
        # print('i am here')
        if board[com[0]] == player and board[com[1]] == player and board[com[2]] == player:
            return True

    return False



# TODO: implement a function to check if the game board is already full
# For tic-tac-toe, tie bascially means the whole board is already occupied
# This function should return with boolean
 def checkFull():
   for j in board:
        if board[j]==' ':
               return False
   return True


#########################################################
## Copy all your code/fucntions in Part 1 to above lines
## (Without Test Cases)
#########################################################

 gameEnded = False
 currentTurnPlayer = 'X'

# entry point of the whole program
 print('Game started: \n\n' +
    ' 1 | 2 | 3 \n' +
    ' --------- \n' +
    ' 4 | 5 | 6 \n' +
    ' --------- \n' +
    ' 7 | 8 | 9 \n')

# TODO: Complete the game play logic below
# You could reference the following flow
# 1. Ask for user input and validate the input
# 2. Update the board
# 3. Check win or tie situation
# 4. Switch User

#Ask for user input and validate the input

 while not gameEnded:
    try:
     move = input(currentTurnPlayer + "'s turn, input: ")
     
     if 1<=int(move)<=9:
       print("  ^^ ^^ ^^ ^^")
     #else:
      # print('Invalid Input!!!')
      
    except:
     print('Invalid Input!!')
     continue
    while not validateMove(move):
      print('Invalid Inputs')
      move = input(currentTurnPlayer + "'s turn, input: ")
      
     
       

#Update the board
    markBoard(int(move),currentTurnPlayer)
    printBoard()

#Check win or tie situation
# Switch User
    if checkWin(currentTurnPlayer):
      print('Winner:'+currentTurnPlayer+'\n Game Ends!')
      gameEnded=True
      
    elif checkFull():
      print('Game Tie')
      gameEnded=True
      
    else:
      if currentTurnPlayer=='X':
       currentTurnPlayer='O'
      else:
       currentTurnPlayer='X'
   
      

  
         
# Bonus Point: Implement the feature for the user to restart the game after a tie or game over
main()
while True:
     
      restart=input('Play again? y/n ')
      if restart=='y': 
        main()  
        continue
      elif restart=='n':
        print('Games Ended!!')
        break
      else:
        print('Invalid Input')
        continue
